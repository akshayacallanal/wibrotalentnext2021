1)
import java.util.Scanner;
public class Maximum_Number 
{
    public static void main(String[] args) 
    {
        int n, max;
        Scanner s = new Scanner(System.in);
        System.out.print("Enter number of elements in the array:");
        n = s.nextInt();
        int a[] = new int[n];
        System.out.println("Enter elements of array:");
        for(int i = 0; i < n; i++)
        {
            a[i] = s.nextInt();
        }
        max = a[0];
        for(int i = 0; i < n; i++)
        {
            if(max < a[i])
            {
                max = a[i];
            }
        }
        System.out.println("Maximum value:"+max);
    }
}

2)


import java.io.*; 
  
class MaxRepeating { 
    static int maxRepeating(int arr[], int n, int k) 
    { 
        for (int i = 0; i< n; i++) 
            arr[(arr[i]%k)] += k;  
        int max = arr[0], result = 0; 
        for (int i = 1; i < n; i++) 
        { 
            if (arr[i] > max) 
            { 
                max = arr[i]; 
                result = i; 
            } 
        } 
 
        for (int i = 0; i< n; i++) 
          arr[i] = arr[i]%k; */
  
        return result; 
    } 
  
    public static void main (String[] args) 
    { 
  
        int arr[] = {2, 3, 3, 5, 3, 4, 1, 7}; 
        int n = arr.length; 
        int k=8; 
        System.out.println("Maximum repeating element is: " + 
                           maxRepeating(arr,n,k)); 
    } 
} 
algorithm:

step 1: Iterate though input array arr[], for every element arr[i], increment arr[arr[i]%k] by k (arr[] becomes {1,2,5,6,8,9,9,3,4,2 })

step 2: Find the maximum value in the modified array. Index of the maximum value is the maximum repeating element.

step 3: If we want to get the original array back, we can iterate through the array one more time and do arr[i] = arr[i] % k where i varies from 0 to n-1.


3)

class Test { 
    static int factorial(int n) 
    { 
        if (n == 0) 
            return 1; 
  
        return n * factorial(n - 1); 
    } 
    public static void main(String[] args) 
    { 
        int num = 5; 
        System.out.println( 
            "Factorial of " + num 
            + " is " + factorial(5)); 
    } 
} 

step 1: Read number n.
step 2: Initialize i and fact to 1.
step 3: Repeat step 4 and step 5 while i is not equal to n.
step 4: fact <- fact * i
step 5: i <- i +1
step 6: Return fact

4)
import java.util.*; 
  
class GFG { 
 
    static String remove_k_characters(String st1, int n, int k) 
    { 
  
       
        Stack<Entity> st = new Stack<Entity>(); 
  
        int i = 0; 
        for (i = 0; i < n; i++) {
            char x = st1.charAt(i); 
            if (st.size() > 0 && st.peek().frequency == k) { 
                char curr = st.peek().character;
                while (st.size() > 0 && st.peek().character == curr) 
                    st.pop(); 
            }
            if (st.size() > 0 && st.peek().character == x) {
                Entity new_top = new Entity(x, st.peek().frequency + 1); 
                st.push(new_top); 
            }
            else { 
                Entity new_top = new Entity(x, 1); 
                st.push(new_top); 
            } 
        } 
 
        if (st.size() > 0 && st.peek().frequency == k) { 

            while (st.size() > 0 && st.peek().character == curr) 
                st.pop(); 
        } 
  
        String stack_string = ""; 
        while (st.size() > 0) 
            stack_string += st.pop().character; 
  
        String reduced_string = ""; 
        for (i = stack_string.length() - 1; i >= 0; i--) 
            reduced_string += stack_string.charAt(i); 
  
        return reduced_string; 
    } 
   
    public static void main(String[] args) 
    { 
        int k = 2; 
        String st = "geeksforgeeks"; 
        String ans = remove_k_characters(st, st.length(), k); 
        System.out.println(ans); 
    } 
  
    static class Entity { 
        char character; 
        int frequency; 
        Entity(char p, int q) 
        { 
            character = p; 
            frequency = q; 
        } 
    } 
} 

step 1: Maintain a stack of the characters while iterating through them one by one.

step 2:When there are ‘k’ identical characters at the top of the stack, pop them out of the stack.

step 3:To implement this, every element of the stack will be a pair of character and it’s consecutive frequency. If the character to be pushed is different from the character which is currently at the top of the stack then it’s frequency will be set to “1”.

syep 4: Else, if the character is identical to the character at the top of the stack then it’s frequency will be one greater than the frequency of the element at the top of the stack.

step 5: In the end, the characters which are left in the stack will form the resultant string.


5)
step 1:21 = 3 × 7

step 2:36 = 3 × 3 × 2 × 2

step 3:66 = 3 × 2 × 11

step 4:So, lcm of 21, 36 and 66 is = 3 × 3 × 2 × 2 × 11 × 7 = 2772, which is not a perfect sqare.

step 5:It is becasue of absence of 11 and 7,Now, we multiply the lcm by 11 and 7.

step 6:We get a number = 2772 × 11 × 7 = 213444

step 7: 462², a perfect square.














} 